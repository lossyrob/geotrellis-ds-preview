geotrellis.catalog = "src/main/resources/catalog.json"
geotrellis.host = "0.0.0.0"
geotrellis.port = 8888
geotrellis.rest-package = "geotrellis.demo"
geotrellis.tmp = "/tmp"


geotrellis.hostname = "localhost"
geotrellis.akka_port = 2551

geotrellis.akka_hostname = "localhost"

geotrellis.cluster_seed = "localhost"
geotrellis.cluster_seed_port = "2551"
geotrellis.cluster_seed_port = ${?GEOTRELLIS_CLUSTER_SEED_PORT}

akka {
  #loglevel = "DEBUG"
  actor {
  #  debug {
      #receive = on
      #lifecycle = on
      #autoreceive = on
  #  }
    provider = "akka.cluster.ClusterActorRefProvider"
  } 
  remote {
    log-sent-messages = on
    transport = "akka.remote.netty.NettyRemoteTransport"
    #log-remote-lifecycle-events = on
    netty.tcp {
      hostname = ${?geotrellis.akka_hostname}
      port = ${geotrellis.akka_port}
      maximum-frame-size = 134217728
    } 
  } 
  remote.server.maximum-frame-size = 134217728
  remote.client.maximum-frame-size = 134217728

  ## nodes will look to the seed node URLs to first join
  ## access the cluster.
  cluster {
    seed-nodes = ["akka.tcp://GeoTrellis@"${geotrellis.cluster_seed}":"${geotrellis.cluster_seed_port}]
    metrics.enabled = off
    auto-join = on
    enabled = true
    auto-down = on
  }
}

akka.actor.deployment {
  ## This configuration routes to servers that have already been created
  ## with the id "remoteServer" on other nodes in the cluster.

  /clusterRouter = {
 #   router = adaptive
    router = round-robin

    # metrics-selector = heap
    # metrics-selector = load
    # metrics-selector = cpu
    metrics-selector = mix
    nr-of-instances = 1000
    max-nr-of-instances-per-node = 3
    cluster {
      enabled = on
      routees-path = "/user/remoteServer"
      allow-local-routees = off
    }
  }
}
